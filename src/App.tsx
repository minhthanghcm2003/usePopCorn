import React, { ReactNode, useEffect, useRef, useState } from 'react';
import StarRating from './Components/StarRating.tsx';
import { useMovie } from './Hooks/useMovie.tsx';
import { useLocalStorageState } from './Hooks/useLocalStorageState.tsx';
import { useKey } from './Hooks/useKey.tsx';

//Khai b√°o ki·ªÉu d·ªØ li·ªáu cho TypescriptTypescript

interface WatchedType {
  imdbID: string;
  Title: string;
  Year: string;
  Poster: string;
  runtime: number;
  imdbRating: number;
  userRating: number;
}
type WatchedMovieProps = {
  movie: WatchedType;
};

type Movie = {
  imdbID: string;
  Title: string;
  Year: string;
  Poster: string;
  onSelectMovie: () => void;
};

type Movies = Movie[];

type MovieDetailsType = {
  Title: string;
  Year: string;
  Poster: string;
  Runtime: string;
  imdbRating: string;
  Plot: string;
  Released: string;
  Actors: string;
  Director: string;
  Genre: string;
};

export default function App() {
  const [query, setQuery] = useState<string>('Interstellar');
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const { movies, isLoading, error } = useMovie(query, handleCloseMovie);
  const [watched, setWatched] = useLocalStorageState([], 'watched');

  function handleSelectMovie(id: string) {
    setSelectedId((selectedId) => (id === selectedId ? null : id));
  }

  function handleCloseMovie() {
    setSelectedId(null);
  }

  function handleAddWatched(movie: WatchedType) {
    setWatched((watched: Movie[]) => [...watched, movie]);
  }

  function handleDeleteWatched(id: string) {
    setWatched((watched: Movie[]) =>
      watched.filter((movie) => movie.imdbID !== id)
    );
  }

  return (
    <>
      <NavBar>
        <Logo />
        <Search query={query} setQuery={setQuery} />
        <NumResult movies={movies} />
      </NavBar>
      <Main>
        <Box>
          {isLoading && <Loader />}
          {!isLoading && !error && (
            <MoveList onSelectMovie={handleSelectMovie} movies={movies} />
          )}
          {error && <ErrorMessage message={error} />}
        </Box>
        <Box>
          {selectedId ? (
            <MovieDetails
              watched={watched}
              onCloseMovie={handleCloseMovie}
              selectedId={selectedId}
              onAddWatched={handleAddWatched}
            />
          ) : (
            <>
              <WatchSummary watched={watched} />
              <WatchedMovieList
                watched={watched}
                onDeleteWatched={handleDeleteWatched}
              />
            </>
          )}
        </Box>
      </Main>
    </>
  );
}

function Loader() {
  return <p className='loader'>Loading...</p>;
}

function ErrorMessage({ message }: { message: ReactNode }) {
  return (
    <p className='error'>
      <span>‚ö†</span> {message}
    </p>
  );
}

// NavBar component
function NavBar({ children }: { children: ReactNode }) {
  return <nav className='nav-bar'>{children}</nav>;
}

function Logo() {
  return (
    <div className='logo'>
      <span role='img'>üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}
function Search({
  query,
  setQuery,
}: {
  query: string;
  setQuery: React.Dispatch<React.SetStateAction<string>>;
}) {
  const inputEl = useRef<HTMLInputElement>(null);
  useKey('Enter', () => {
    if (document.activeElement === inputEl.current) return;
    inputEl.current?.focus();
    setQuery('');
  });

  return (
    <input
      className='search'
      type='text'
      placeholder='Search movies...'
      value={query}
      onChange={(e) => setQuery(e.target.value)}
      ref={inputEl}
    />
  );
}
function NumResult({
  movies,
}: {
  movies: {
    imdbID: string;
    Title: string;
    Year: string;
    Poster: string;
  }[];
}) {
  return (
    <p className='num-results'>
      Found <strong>{movies.length}</strong> results
    </p>
  );
}
function Main({ children }: { children: ReactNode }) {
  return <main className='main'>{children}</main>;
}

function Box({ children }: { children: ReactNode }) {
  const [isOpen, setIsOpen] = useState(true);
  return (
    <div className='box'>
      <button className='btn-toggle' onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? '‚Äì' : '+'}
      </button>
      {isOpen && children}
    </div>
  );
}
//Component n√†y s·∫Ω ch·ªãu tr√°ch nhi·ªám l·∫•y danh s√°ch phim t·ª´ data. Sau ƒë√≥ l·ªçc qua v√† truy·ªÅn t·∫•t c·∫£ c√°c phim ƒë√£ l·ªçc th√¥ng qua prop xu·ªëng th·∫±ng con Movie ƒë·ªÉ n√≥ render c√°c th√¥ng tin
function MoveList({
  movies,
  onSelectMovie,
}: {
  movies: Movies;
  onSelectMovie: (id: string) => void;
}) {
  return (
    <ul className='list list-movies'>
      {movies?.map((movie) => (
        <Movie onSelectMovie={onSelectMovie} movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}
//Component n√†y s·∫Ω ch·ªãu tr√°ch nhi·ªám x·ª≠ l√≠ c√°c th√¥ng tin c·ªßa phim sau ƒë√≥ ƒë∆∞·ª£c render ·ªü trong MovieListMovieList
function Movie({
  movie,
  onSelectMovie,
}: {
  movie: Movie;
  onSelectMovie: (id: string) => void;
}) {
  return (
    <li onClick={() => onSelectMovie(movie.imdbID)} key={movie.imdbID}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}

function MovieDetails({
  selectedId,
  onCloseMovie,
  onAddWatched,
  watched,
}: {
  selectedId: string;
  onCloseMovie: () => void;
  onAddWatched: (movie: WatchedType) => void;
  watched: WatchedType[];
}) {
  const [movie, setMovie] = useState<Partial<MovieDetailsType>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [userRating, setUserRating] = useState<number>(0);

  const isWatched = watched.some((movie) => movie.imdbID === selectedId);
  const watchedUserRating = watched.find(
    (movie) => movie.imdbID === selectedId
  )?.userRating;

  const {
    Title: title,
    Year: year,
    Poster: poster,
    Runtime: runtime,
    imdbRating,
    Plot: plot,
    Released: released,
    Actors: actors,
    Director: director,
    Genre: genre,
  } = movie;

  useKey('Escape', onCloseMovie);

  function handleAdd() {
    const newWatchedMovie: WatchedType = {
      imdbID: selectedId,
      Title: title || '',
      Year: year || '',
      Poster: poster || '',
      runtime: Number(runtime?.split(' ')[0]) || 0,
      imdbRating: Number(imdbRating) || 0,
      userRating,
    };
    onAddWatched(newWatchedMovie);
    onCloseMovie();
  }

  const API_KEY = '4f8058f2';

  useEffect(() => {
    async function getMovieDetails() {
      setIsLoading(true);
      try {
        const res = await fetch(
          `https://www.omdbapi.com/?apikey=${API_KEY}&i=${selectedId}`
        );
        const data = await res.json();
        setMovie(data);
      } catch (error) {
        console.error('Failed to fetch movie details:', error);
      } finally {
        setIsLoading(false);
      }
    }
    getMovieDetails();
  }, [selectedId]);

  useEffect(() => {
    if (title) {
      document.title = `Movie | ${title}`;
    }
    return () => {
      document.title = 'usePopcorn';
    };
  }, [title]);

  return (
    <div className='details'>
      {isLoading ? (
        <Loader />
      ) : (
        <>
          <header>
            <button className='btn-back' onClick={onCloseMovie}>
              &larr;
            </button>
            <img src={poster} alt={`Poster of ${title}`} />
            <div className='details-overview'>
              <h2>{title}</h2>
              <p>
                {released} &bull; {runtime}
              </p>
              <p>{genre}</p>
              <p>
                <span>‚≠ê</span>
                {imdbRating} IMDB rating
              </p>
            </div>
          </header>

          <section>
            <div className='rating'>
              {!isWatched ? (
                <>
                  <StarRating
                    maxRating={10}
                    size={23}
                    onSetRating={setUserRating}
                  />
                  {userRating > 0 && (
                    <button className='btn-add' onClick={handleAdd}>
                      + Add to list
                    </button>
                  )}
                </>
              ) : (
                <p>
                  You rated this movie {watchedUserRating} <span>‚≠ê</span>
                </p>
              )}
            </div>
            <p>
              <em>{plot}</em>
            </p>
            <p>Starring {actors}</p>
            <p>Directed by {director}</p>
          </section>
        </>
      )}
    </div>
  );
}

function WatchSummary({ watched }: { watched: WatchedType[] }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));
  return (
    <div className='summary'>
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating.toFixed(2)}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating.toFixed(2)}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}
function WatchedMovieList({
  watched,
  onDeleteWatched,
}: {
  watched: WatchedType[];
  onDeleteWatched: (id: string) => void;
}) {
  return (
    <ul className='list'>
      {watched.map((movie) => (
        <WatchedMovie
          movie={movie}
          key={movie.imdbID}
          onDeleteWatched={onDeleteWatched}
        />
      ))}
    </ul>
  );
}
function WatchedMovie({
  movie,
  onDeleteWatched,
}: WatchedMovieProps & { onDeleteWatched: (id: string) => void }) {
  return (
    <li key={movie.imdbID}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
        <button
          className='btn-delete'
          onClick={() => onDeleteWatched(movie.imdbID)}
        >
          &times;
        </button>
      </div>
    </li>
  );
}
const average = (arr: number[]) =>
  arr.reduce((acc, cur) => acc + cur / arr.length, 0);
//Final
